{"version":3,"sources":["components/nav.jsx","components/header.jsx","components/footer.jsx","components/form.jsx","components/results.jsx","components/history.jsx","App.js","serviceWorker.js","index.js"],"names":["nav","to","header","className","styles","footer","props","footerClass","href","Form","_handleSubmit","e","formHandler","a","preventDefault","method","target","value","url","textArea","state","console","log","history","localStorage","getItem","JSON","parse","superagent","send","data","status","unshift","results","setItem","stringify","_handleTextArea","clickedRadio","includes","setState","onChangeHandler","name","body","nextProps","formValues","this","onClick","onSubmit","id","type","placeholder","defaultValue","required","onChange","checked","htmlFor","cols","rows","React","Component","src","History","_handleHistory2Form","cb","withBody","currentTarget","attributes","nodeValue","valuesObj","childNodes","forEach","element","innerText","condition","map","val","i","dataset","formValuesHandler","key","Object","keys","j","App","count","resultArr","footerToggle","NaN","obj","Fragment","exact","path","undefined","pa","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80a679bd.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nconst nav = () => {\r\n    return (\r\n        <>\r\n            <ul>\r\n                <li >\r\n                    <NavLink to=\"/\"> Home</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/history\"> History</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/help\"> Help</NavLink>\r\n                </li>\r\n            </ul>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default nav;","import styles from '../components-styles/header.scss';\r\nimport Nav from './nav'\r\nimport React from 'react';\r\n\r\nconst header = () => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1>RESTy</h1>\r\n            <Nav />\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default header;","import '../components-styles/footer.scss';\r\nimport React from 'react';\r\n\r\nconst footer = (props) => {\r\n    return (\r\n        <footer className={'footer-' + props.footerClass}>\r\n            <p>Made with â™¥ by <a href=\"https://www.linkedin.com/in/osama-hanoun/\">Osama Hanoun</a> </p>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default footer;","import '../components-styles/form.scss';\r\nimport React from 'react';\r\nimport superagent from 'superagent'\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            textArea: false,\r\n            url: '',\r\n            method: '',\r\n            body: '',\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        // This will erase any local state updates!\r\n        // Do not do this.\r\n        console.log(nextProps)\r\n        let textArea = ('postput').includes(nextProps.formValues.method) ? true : false;\r\n        this.setState({ url: nextProps.formValues.url, method: nextProps.formValues.method, body: nextProps.formValues.body, textArea });\r\n    }\r\n    _handleSubmit = async (e, formHandler) => {\r\n        e.preventDefault();\r\n        let method = e.target.method.value;\r\n        let url = e.target.url.value;\r\n        let textArea = this.state.textArea ? e.target.textArea.value : false;\r\n        console.log('url ', url, ' method ', method, ' textarea', textArea)\r\n        let data;\r\n        let status;\r\n        let history = localStorage.getItem('history') ? JSON.parse(localStorage.getItem('history')) : [];\r\n        ;\r\n        try {\r\n            if (this.state.textArea) {\r\n                data = await superagent[method](url).send(textArea);\r\n                status = data.status;\r\n                history.unshift({ textArea, method, url, status, results: data });\r\n            }\r\n            else {\r\n                data = await superagent[method](url);\r\n                status = data.status;\r\n                history.unshift({ method, url, status, results: data });\r\n            }\r\n            localStorage.setItem('history', JSON.stringify(history));\r\n            let count = '5';\r\n            formHandler(count, data, true)\r\n        } catch (error) {\r\n\r\n            console.log('Invalid Link ', typeof (history))\r\n            data = 'Invalid Link '\r\n        }\r\n\r\n    }\r\n    _handleTextArea = (e) => {\r\n        let clickedRadio = e.target.value;\r\n        if (clickedRadio) {\r\n\r\n            if ((['get', 'delete']).includes(clickedRadio)) {\r\n                this.setState({ textArea: false });\r\n            }\r\n            else if ((['post', 'put']).includes(clickedRadio))\r\n                this.setState({ textArea: true });\r\n        }\r\n    }\r\n    onChangeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    render() {\r\n        return (\r\n            <main>\r\n                <div>\r\n                    <form onClick={this._handleTextArea} onSubmit={(e) => this._handleSubmit(e, this.props.formHandler)}>\r\n                        <input id=\"url\" type=\"url\" name=\"url\" placeholder=\"url\" defaultValue={this.state.url} required />\r\n                        <button type=\"submit\"> GO! </button>\r\n                        <br />\r\n                        <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" required onChange={e => this.onChangeHandler(e)} checked={'get' === this.state.method} />\r\n                        <label htmlFor=\"get\">GET</label>\r\n                        <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" required onChange={e => this.onChangeHandler(e)} checked={'post' === this.state.method} />\r\n                        <label htmlFor=\"post\">POST</label>\r\n                        <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\" required onChange={e => this.onChangeHandler(e)} checked={'put' === this.state.method} />\r\n                        <label htmlFor=\"put\">PUT</label>\r\n                        <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" required onChange={e => this.onChangeHandler(e)} checked={'delete' === this.state.method} />\r\n                        <label htmlFor=\"delete\">DELETE</label>\r\n                        {this.state.textArea ? < textarea name=\"textArea\" id=\"body\" cols=\"30\" rows=\"10\" defaultValue={this.state.body ? this.state.body : ''} /> : null}\r\n                    </form >\r\n                </div>\r\n            </main >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import '../components-styles/results.scss';\r\nimport React from 'react';\r\nimport ReactJson from 'react-json-view'\r\n\r\nconst results = (props) => {\r\n    return (\r\n        <div className=\"json-div\">\r\n            <h3>Header</h3>\r\n            <ReactJson src={props.results.header} />\r\n            <h3>Body</h3>\r\n            <ReactJson src={props.results.body} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default results;","import React from 'react';\r\nimport '../components-styles/history.scss'\r\nimport { When } from 'react-if'\r\nimport Results from './results'\r\nclass History extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: false,\r\n        };\r\n    }\r\n    _handleHistory2Form = (e, cb, withBody) => {\r\n        if (withBody) {\r\n            this.setState({ results: JSON.parse(e.currentTarget.attributes[0].nodeValue) })\r\n        } else {\r\n            let valuesObj = {};\r\n            e.currentTarget.childNodes.forEach(element => {\r\n                valuesObj[element.className] = element.innerText;\r\n            });\r\n            cb(valuesObj);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>method</th>\r\n                            <th>status</th>\r\n                            <th> url</th>\r\n                            <th>body</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody >\r\n                        <When condition={this.props.history !== null}>\r\n                            {this.props.history.map((val, i) => {\r\n                                return <tr dataset={JSON.stringify(val.results)} onClick={(e) => this._handleHistory2Form(e, this.props.formValuesHandler, this.props.withBody)} key={i}>\r\n                                    {Object.keys(val).map((key, j) => {\r\n                                        return (key !== 'results' ? <td className={key} key={j}>{val[key]}</td> : null);\r\n                                    })}\r\n                                </tr>\r\n                            })}\r\n                        </When>\r\n                    </tbody>\r\n                </table>\r\n                <When condition={this.props.withBody && this.state.results}>\r\n                    <Results results={this.state.results} />\r\n                </When>\r\n\r\n            </>\r\n        )\r\n\r\n    }\r\n};\r\n\r\nexport default History;","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport './components-styles/reset.scss'\r\nimport './components-styles/colors.scss'\r\nimport Header from './components/header.jsx';\r\nimport Footer from './components/footer.jsx';\r\nimport Form from './components/form.jsx';\r\nimport History from './components/history.jsx'\r\nimport Results from './components/results.jsx'\r\nimport { When } from 'react-if'\r\n\r\nclass App extends React.Component {\r\n  // init state\r\n  state = {\r\n    count: null,\r\n    resultArr: null,\r\n    footerToggle: false,\r\n    history: JSON.parse(localStorage.getItem('history')),\r\n    formValues: { url: NaN, method: NaN, body: NaN },\r\n  };\r\n  formHandler = (count, resultArr) => {\r\n    this.setState({\r\n      count: count,\r\n      resultArr: resultArr,\r\n      footerToggle: !this.state.footerToggle,\r\n      history: JSON.parse(localStorage.getItem('history')),\r\n    });\r\n  }\r\n  formValuesHandler = obj => {\r\n    console.log('clicked-app')\r\n    this.setState({ formValues: obj });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <BrowserRouter>\r\n\r\n          <Header />\r\n          <Route exact path=\"/\">\r\n            <Form formHandler={this.formHandler} formValues={this.state.formValues} />\r\n            <When condition={this.state.history !== undefined}>\r\n              <History formValuesHandler={this.formValuesHandler} history={this.state.history} withBody={false} />\r\n            </When>\r\n            <When condition={!!this.state.resultArr}>\r\n              <Results exact pa results={this.state.resultArr} />\r\n            </When>\r\n          </Route>\r\n          <Route exact path=\"/History\">\r\n            <History history={this.state.history} withBody={true} />\r\n          </Route>\r\n          <Route exact path=\"/help\">\r\n            <p>This is help </p>\r\n          </Route>\r\n          <Footer footerClass={this.state.footerToggle} />\r\n        </BrowserRouter>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}